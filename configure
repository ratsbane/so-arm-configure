#!/usr/bin/env python3

import os
import sys
import tty
import termios
import platform
import time
import threading
from serial.tools import list_ports
from STservo_sdk import *

# Constants
BAUDRATE = 1000000
STS_MIN_POS = 0
STS_MAX_POS = 4095
DEFAULT_DEVICE = '/dev/ttyACM0'

# Global Variables
interfaces = []
selected_interface = None
motors = {}
selected_motor = None
min_position = None
max_position = None

# Helpers for keyboard input
def getch():
    fd = sys.stdin.fileno()
    old_settings = termios.tcgetattr(fd)
    try:
        tty.setraw(fd)
        ch = sys.stdin.read(1)
        if ch == "\x1b":
            ch += sys.stdin.read(2)
    finally:
        termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)
    return ch

# Display help menu
def display_help():
    print("\n=== MOTOR CONTROL HELP ===")
    print("i - Select interface")
    print("m - Discover and select motors")
    print("t - Tag motor (change ID)")
    print("←/→ - Move motor (left/right in servo mode, reverse/forward in wheel mode)")
    print("↑/↓ - Adjust speed (faster/slower)")
    print("space - Stop motor (in wheel mode)")
    print("n - Set minimum position limit (at current position)")
    print("x - Set maximum position limit (at current position)")
    print("s - Display motor status")
    print("c - Center motor (in servo mode)")
    print("p - Set motor mode (0=Servo, 1=Wheel, 2=No-Torque)")
    print("w - Wheel control menu (in wheel mode)")
    print("? - Display this help menu")
    print("q - Quit program")
    print("=======================")

# Cross-platform USB monitoring
def scan_existing_interfaces():
    global interfaces, selected_interface
    interfaces.clear()
    for port in list_ports.comports():
        if "ttyACM" in port.device or "tty.usb" in port.device or "cu.usb" in port.device:
            print(f"Found existing interface: {port.device}")
            interfaces.append(port.device)
    if len(interfaces) == 1:
        selected_interface = interfaces[0]
        print(f"Automatically selected interface: {selected_interface}")

def monitor_usb():
    if platform.system() == "Linux":
        import pyudev
        def usb_callback(device):
            device_node = device.device_node
            action = device.action
            if device_node is None:
                return
            if action == 'add' and "ttyACM" in device_node:
                if device_node not in interfaces:
                    print(f"USB Device Added: {device_node}")
                    interfaces.append(device_node)
            elif action == 'remove' and device_node in interfaces:
                print(f"USB Device Removed: {device_node}")
                interfaces.remove(device_node)
        context = pyudev.Context()
        monitor = pyudev.Monitor.from_netlink(context)
        monitor.filter_by('usb')
        observer = pyudev.MonitorObserver(monitor, callback=usb_callback)
        observer.start()
    else:
        def poll_usb():
            global interfaces
            prev = set(interfaces)
            while True:
                current = set()
                for port in list_ports.comports():
                    if "ttyACM" in port.device or "tty.usb" in port.device or "cu.usb" in port.device:
                        current.add(port.device)
                added = current - prev
                removed = prev - current
                for d in added:
                    print(f"USB Device Added: {d}")
                    interfaces.append(d)
                for d in removed:
                    print(f"USB Device Removed: {d}")
                    interfaces.remove(d)
                prev = current
                time.sleep(2)
        t = threading.Thread(target=poll_usb, daemon=True)
        t.start()

# STServo SDK helpers
def initialize_sdk(device):
    port_handler = PortHandler(device)
    packet_handler = sts(port_handler)
    
    # Multiple attempts to open the port in case it's in a transitionary state
    for attempt in range(3):
        if port_handler.openPort():
            break
        print(f"Failed to open port {device}, attempt {attempt+1}/3")
        time.sleep(0.5)
    else:
        print(f"Failed to open port {device} after 3 attempts")
        return None, None
        
    if not port_handler.setBaudRate(BAUDRATE):
        print(f"Failed to set baudrate for {device}")
        return None, None
        
    print(f"Initialized device {device}")
    return port_handler, packet_handler

def enable_torque(packet_handler, motor_id, enable=True):
    """Enable or disable motor torque"""
    value = 1 if enable else 0
    result, error = packet_handler.write1ByteTxRx(motor_id, STS_TORQUE_ENABLE, value)
    if result != COMM_SUCCESS or error != 0:
        print(f"Failed to {'enable' if enable else 'disable'} torque for motor {motor_id}. Error: {error}")
        return False
    return True

def report_motor_status(packet_handler, motor_id):
    try:
        position, speed, result, _ = packet_handler.ReadPosSpeed(motor_id)
        if result == COMM_SUCCESS:
            voltage, _, _ = packet_handler.ReadVoltage(motor_id)
            temperature, _, _ = packet_handler.ReadTemperature(motor_id)
            current, _, _ = packet_handler.ReadCurrent(motor_id)
            load, _, _ = packet_handler.ReadLoad(motor_id)
            moving_status, _, _ = packet_handler.ReadMoving(motor_id)
            motors[motor_id] = {
                "position": position,
                "speed": speed,
                "voltage": voltage / 10.0,  # Divide by 10 for actual voltage
                "temperature": temperature,
                "current": current,
                "load": load,
                "moving": moving_status
            }
            mode = get_motor_mode(packet_handler, motor_id)
            mode_str = get_motor_mode_label(mode) if mode is not None else "(unreadable)"
            print(f"{motor_id}: Position: {position}, Speed: {speed}, Voltage: {voltage/10.0:.1f}V, Temperature: {temperature}°C, Current: {current}mA, Load: {load}, Moving: {'Yes' if moving_status else 'No'}, Mode: {mode_str}")
    except Exception as e:
        print(f"Error scanning motor ID {motor_id}: {e}")

def discover_motors(packet_handler):
    global motors
    motors.clear()
    print("Scanning for motors...")
    for motor_id in range(1, 12):
        position, speed, result, _ = packet_handler.ReadPosSpeed(motor_id)
        if result == COMM_SUCCESS:
            print(f"Found motor ID {motor_id}:")
            report_motor_status(packet_handler, motor_id)
    if not motors:
        print("No motors found.")
    return motors

def tag_motor(packet_handler, current_id, new_id):
    print(f"Unlocking EEPROM for motor ID {current_id}...")
    unlock_result, _ = packet_handler.unLockEprom(current_id)
    if unlock_result != COMM_SUCCESS:
        print(f"Failed to unlock EEPROM for motor {current_id}.")
        return
    print(f"Changing motor ID {current_id} → {new_id}...")
    result, error = packet_handler.WriteID(current_id, new_id)
    if result == COMM_SUCCESS and error == 0:
        print(f"Motor ID updated: {current_id} → {new_id}")
        lock_result, _ = packet_handler.LockEprom(new_id)
        if lock_result == COMM_SUCCESS:
            print(f"EEPROM locked for motor {new_id}.")
        motors[new_id] = motors.pop(current_id)
    else:
        print(f"Failed to update ID from {current_id} to {new_id}. Error: {error}")

def move_motor(packet_handler, motor_id, position, speed=2400, acc=50):
    mode = get_motor_mode(packet_handler, motor_id)
    if mode == 0:  # Servo mode
        print(f"Moving motor {motor_id} to position {position}...")
        # Force unlock before movement
        packet_handler.unLockEprom(motor_id)
        
        # Enable torque
        enable_torque(packet_handler, motor_id, True)
        
        # Use WritePosEx for position control
        result, error = packet_handler.WritePosEx(motor_id, position, speed, acc)
        if result != COMM_SUCCESS or error != 0:
            print(f"Failed to move motor ID {motor_id} to position {position}, error: {error}")
            return False
        return True
    else:
        print(f"Cannot use move_motor in mode {get_motor_mode_label(mode)}. Use set_wheel_speed instead.")
        return False

def set_wheel_speed(packet_handler, motor_id, speed):
    """
    Set the speed for a motor in wheel mode.
    Speed range: -1000 to 1000 (negative for reverse, positive for forward, 0 to stop)
    """
    mode = get_motor_mode(packet_handler, motor_id)
    if mode != 1:  # Check if in wheel mode
        print(f"Motor {motor_id} is not in wheel mode. Current mode: {get_motor_mode_label(mode)}")
        return False
    
    # Default acceleration
    acc = 50
    
    # Make sure torque is enabled for wheel mode
    enable_torque(packet_handler, motor_id, True)
    
    try:
        # Clamp speed to valid range (-1000 to 1000)
        clamped_speed = max(-1000, min(1000, speed))
        
        print(f"Setting wheel speed to {clamped_speed} with acc={acc}...")
        
        # Call WriteSpec with the speed (can be positive, negative, or zero)
        result, error = packet_handler.WriteSpec(motor_id, clamped_speed, acc)
        
        if result != COMM_SUCCESS or error != 0:
            print(f"Failed to set wheel speed for motor ID {motor_id} to {speed}, error: {error}")
            return False
        
        direction = "stopped" if speed == 0 else ("forward" if speed > 0 else "reverse")
        print(f"Motor {motor_id} wheel {direction} at speed {abs(clamped_speed)}")
        return True
    except Exception as e:
        print(f"Error setting wheel speed: {e}")
        return False

def stop_wheel(packet_handler, motor_id):
    """Stop a motor in wheel mode"""
    return set_wheel_speed(packet_handler, motor_id, 0)

def center_motor(packet_handler, motor_id, speed=2400):
    mode = get_motor_mode(packet_handler, motor_id)
    if mode != 0:  # Not in servo mode
        print(f"Cannot center - motor {motor_id} is in {get_motor_mode_label(mode)} mode, not Servo mode")
        return
        
    if min_position is not None and max_position is not None:
        center = (min_position + max_position) // 2
    else:
        center = 2047
    move_motor(packet_handler, motor_id, center, speed, 50)
    print(f"Motor ID {motor_id} moved to center position: {center} at speed {speed}")

# Display and set motor mode
def get_motor_mode_label(mode):
    return {
        0: "Servo",
        1: "Wheel",
        2: "No-Torque"
    }.get(mode, f"Unknown ({mode})")

def get_motor_mode(packet_handler, motor_id):
    """Read current motor mode"""
    mode, result, _ = packet_handler.read1ByteTxRx(motor_id, 33)  # STS_MODE
    return (mode if result == COMM_SUCCESS else None)

def set_motor_mode(packet_handler, motor_id, mode):
    if mode not in [0, 1, 2]:
        print("Invalid mode. Use 0 for Servo, 1 for Wheel, 2 for No-Torque.")
        return

    # Unlock EEPROM to change mode
    unlock_result, _ = packet_handler.unLockEprom(motor_id)
    if unlock_result != COMM_SUCCESS:
        print(f"Failed to unlock EEPROM for motor {motor_id}.")
        return
        
    result, error = packet_handler.write1ByteTxRx(motor_id, 33, mode)  # STS_MODE
    if result == COMM_SUCCESS and error == 0:
        print(f"Motor {motor_id} mode set to: {get_motor_mode_label(mode)}")
        
        # Mode-specific setup
        if mode == 1:  # Wheel mode
            # First enable torque then stop the motor when switching to wheel mode
            enable_torque(packet_handler, motor_id, True)
            stop_result, stop_error = packet_handler.WriteSpec(motor_id, 0, 50)
            if stop_result == COMM_SUCCESS and stop_error == 0:
                print(f"Initialized wheel mode with speed 0")
        
        elif mode == 2:  # No-Torque mode
            # For No-Torque mode, we need to disable torque
            enable_torque(packet_handler, motor_id, False)
            print(f"Torque disabled for No-Torque mode")
                
        # Lock EEPROM after setting mode
        lock_result, _ = packet_handler.LockEprom(motor_id)
        if lock_result != COMM_SUCCESS:
            print(f"Warning: Failed to lock EEPROM for motor {motor_id}.")
    else:
        print(f"Failed to set mode for motor {motor_id}. Error: {error}")

# Main loop
def main():
    global selected_interface, selected_motor, min_position, max_position
    
    scan_existing_interfaces()
    usb_thread = threading.Thread(target=monitor_usb, daemon=True)
    usb_thread.start()
    
    port_handler = None
    packet_handler = None
    wheel_speed = 500  # Default wheel speed
    wheel_acc = 50     # Default wheel acceleration
    servo_speed = 2400 # Default servo speed
    servo_increment = 50 # Default position increment
    
    # Display help at startup
    display_help()
    
    while True:
        command = getch()
        
        if command == '?':  # Display help menu
            display_help()
            continue
            
        if command == 'q':
            print("Exiting...")
            break
            
        elif command == 'i':
            if interfaces:
                print("Available interfaces:")
                for idx, iface in enumerate(interfaces):
                    print(f"{idx}: {iface}")
                if len(interfaces) == 1:
                    selected_interface = interfaces[0]
                    print(f"Automatically selected interface: {selected_interface}")
                else:
                    selected_interface = interfaces[int(input("Select interface: "))]
            else:
                print("No interfaces found.")
                
        elif command == 'm':
            if not selected_interface:
                print("No interface selected.")
                continue
            port_handler, packet_handler = initialize_sdk(selected_interface)
            if not port_handler or not packet_handler:
                print("Failed to initialize SDK.")
                continue
            global motors
            motors = discover_motors(packet_handler)
            if not motors:
                continue
            print("Available motors:")
            for motor_id in motors:
                print(f"ID: {motor_id}")
            try:
                selected_motor = int(input("Select motor ID: "))
                if selected_motor not in motors:
                    print("Invalid motor ID.")
                    selected_motor = None
            except ValueError:
                print("Invalid input.")
                selected_motor = None
                
        elif command == 't':
            if selected_motor is None:
                print("No motor selected.")
                continue
            new_id = int(input(f"Enter new ID for motor {selected_motor}: "))
            tag_motor(packet_handler, selected_motor, new_id)
            
        elif command in ['\x1b[C', '\x1b[D', '\033[C', '\033[D', '\x1b[A', '\x1b[B', '\033[A', '\033[B']:  # Arrow keys
            if selected_motor is None:
                print("No motor selected.")
                continue
                
            # Determine arrow key direction
            is_horizontal = command in ['\x1b[C', '\x1b[D', '\033[C', '\033[D']  # Left/Right
            is_vertical = command in ['\x1b[A', '\x1b[B', '\033[A', '\033[B']    # Up/Down
            
            is_up = command in ['\x1b[A', '\033[A']
            is_right = command in ['\x1b[C', '\033[C']
            
            mode = get_motor_mode(packet_handler, selected_motor)
            
            # Handle Up/Down (speed adjustment)
            if is_vertical:
                if mode == 0:  # Servo mode
                    speed_change = 200
                    if is_up:
                        servo_speed = min(servo_speed + speed_change, 4000)
                    else:
                        servo_speed = max(servo_speed - speed_change, 200)
                    print(f"Servo speed set to {servo_speed}")
                    
                    # Also adjust increment based on speed
                    servo_increment = max(20, min(100, servo_speed // 40))
                    print(f"Position increment set to {servo_increment}")
                    
                elif mode == 1:  # Wheel mode
                    speed_change = 100
                    if is_up:
                        wheel_speed = min(wheel_speed + speed_change, 1000)
                    else:
                        wheel_speed = max(wheel_speed - speed_change, 100)
                    print(f"Wheel speed set to {wheel_speed}")
                    
                    # If currently moving, update the speed
                    moving_status, _, _ = packet_handler.ReadMoving(selected_motor)
                    if moving_status:
                        current_speed, _, _ = packet_handler.ReadSpeed(selected_motor)
                        # If already moving, maintain direction but update speed
                        if current_speed != 0:
                            direction = 1 if current_speed > 0 else -1
                            set_wheel_speed(packet_handler, selected_motor, wheel_speed * direction)
                continue  # Skip the rest of the loop for vertical arrow keys
            
            # Handle Left/Right (movement)
            if mode == 0:  # Servo mode
                try:
                    position, speed, result, _ = packet_handler.ReadPosSpeed(selected_motor)
                    if result != COMM_SUCCESS:
                        print("Failed to read motor position. Reconnecting...")
                        port_handler, packet_handler = initialize_sdk(selected_interface)
                        if not port_handler or not packet_handler:
                            print("Failed to reinitialize connection.")
                            continue
                        position, speed, result, _ = packet_handler.ReadPosSpeed(selected_motor)
                        if result != COMM_SUCCESS:
                            print("Still unable to read motor position.")
                            continue
                            
                    if min_position is None or max_position is None:
                        min_position, max_position = 0, 4095
                        new_position = 2047
                    else:
                        if is_right:  # Right arrow
                            new_position = min(position + servo_increment, max_position)
                        else:  # Left arrow
                            new_position = max(position - servo_increment, min_position)
                    
                    # Force enable torque
                    enable_torque(packet_handler, selected_motor, True)
                    
                    # Move motor with current servo speed
                    move_motor(packet_handler, selected_motor, new_position, servo_speed, wheel_acc)
                    
                    # Wait briefly for movement to start
                    time.sleep(0.1)
                    
                    # Report status
                    report_motor_status(packet_handler, selected_motor)
                except Exception as e:
                    print(f"Error during servo movement: {e}")
                
            elif mode == 1:  # Wheel mode
                try:
                    if is_right:  # Right arrow - forward
                        set_wheel_speed(packet_handler, selected_motor, wheel_speed)
                    else:  # Left arrow - reverse
                        set_wheel_speed(packet_handler, selected_motor, -wheel_speed)
                        
                    time.sleep(0.1)  # Brief pause
                    report_motor_status(packet_handler, selected_motor)
                except Exception as e:
                    print(f"Error during wheel control: {e}")
            else:
                print(f"Motor is in {get_motor_mode_label(mode)} mode. Cannot control movement.")
                
        elif command == ' ':  # Spacebar
            if selected_motor is None:
                print("No motor selected.")
                continue
                
            try:
                mode = get_motor_mode(packet_handler, selected_motor)
                if mode == 1:  # Wheel mode
                    stop_wheel(packet_handler, selected_motor)
                    print(f"Stopped wheel motion for motor {selected_motor}")
                    # Force report status after stopping
                    time.sleep(0.1)
                    report_motor_status(packet_handler, selected_motor)
                else:
                    print(f"Spacebar stop only works in wheel mode. Current mode: {get_motor_mode_label(mode)}")
            except Exception as e:
                print(f"Error stopping wheel: {e}")
                # Try to reconnect if there was an error
                port_handler, packet_handler = initialize_sdk(selected_interface)
                
        elif command == 'w':  # Wheel control menu
            if selected_motor is None:
                print("No motor selected.")
                continue
                
            mode = get_motor_mode(packet_handler, selected_motor)
            if mode != 1:
                print(f"Motor {selected_motor} is not in wheel mode. Current mode: {get_motor_mode_label(mode)}")
                continue
                
            print("\nWheel Control Menu:")
            print("1 - Set speed")
            print("2 - Forward")
            print("3 - Reverse")
            print("4 - Stop")
            print("q - Back to main menu")
            
            wheel_cmd = getch()
            if wheel_cmd == '1':
                try:
                    wheel_speed = int(input("Enter wheel speed (0-1000): "))
                    wheel_speed = max(0, min(1000, wheel_speed))  # Clamp between 0-1000
                    print(f"Wheel speed set to {wheel_speed}")
                except ValueError:
                    print("Invalid input. Must be a number between 0-1000.")
            elif wheel_cmd == '2':
                set_wheel_speed(packet_handler, selected_motor, wheel_speed)
            elif wheel_cmd == '3':
                set_wheel_speed(packet_handler, selected_motor, -wheel_speed)
            elif wheel_cmd == '4':
                stop_wheel(packet_handler, selected_motor)
            elif wheel_cmd == 'q':
                pass  # Return to main menu
                
        elif command == 'n':
            if selected_motor is None:
                print("No motor selected.")
                continue
            min_position = packet_handler.ReadPosSpeed(selected_motor)[0]
            print(f"Set min position to {min_position}")
            
        elif command == 'x':
            if selected_motor is None:
                print("No motor selected.")
                continue
            max_position = packet_handler.ReadPosSpeed(selected_motor)[0]
            print(f"Set max position to {max_position}")
            
        elif command == 's':
            if not motors:
                print("No motors discovered yet.")
                continue
            for motor_id in motors:
                report_motor_status(packet_handler, motor_id)
                
        elif command == 'c':
            if selected_motor is None:
                print("No motor selected.")
                continue
            center_motor(packet_handler, selected_motor, servo_speed)
            
        elif command == 'p':
            if selected_motor is None:
                print("No motor selected.")
                continue
            try:
                print("\nAvailable modes:")
                print("0 - Servo (position control)")
                print("1 - Wheel (continuous rotation)")
                print("2 - No-Torque (free movement)")
                mode = int(input("Enter mode (0/1/2): "))
                set_motor_mode(packet_handler, selected_motor, mode)
            except ValueError:
                print("Invalid input. Must be 0, 1, or 2.")

if __name__ == "__main__":
    main()
