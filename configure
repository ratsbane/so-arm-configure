#!/usr/bin/env python3

import os
import sys
import pyudev
import tty
import termios
from STservo_sdk import *  # Make sure this module is included in the same directory

# Constants
BAUDRATE = 1000000
STS_MIN_POS = 0
STS_MAX_POS = 4095
DEFAULT_DEVICE = '/dev/ttyACM0'

# Global Variables
interfaces = []
selected_interface = None
motors = {}
selected_motor = None
min_position = None
max_position = None

# Helpers for keyboard input
def getch():
    """
    Read a single keypress, properly handling arrow keys.
    """
    fd = sys.stdin.fileno()
    old_settings = termios.tcgetattr(fd)
    try:
        tty.setraw(fd)  # Put terminal in raw mode
        ch = sys.stdin.read(1)  # Read first byte

        if ch == "\x1b":  # Start of an escape sequence
            ch += sys.stdin.read(2)  # Read the next two bytes
    finally:
        termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)
    
    return ch



# Detect USB events
def monitor_usb():
    def usb_callback(device):
        """
        Callback for USB device events. Updates the `interfaces` list when a
        serial device is added or removed.
        """
        action = device.action
        device_node = device.device_node

        if device_node is None:
            # Skip devices without a device node
            return

        if action == 'add' and "ttyACM" in device_node:
            if device_node not in interfaces:
                print(f"USB Device Added: {device_node}")
                interfaces.append(device_node)
        elif action == 'remove' and device_node in interfaces:
            print(f"USB Device Removed: {device_node}")
            interfaces.remove(device_node)

    context = pyudev.Context()
    monitor = pyudev.Monitor.from_netlink(context)
    monitor.filter_by('usb')
    observer = pyudev.MonitorObserver(monitor, callback=usb_callback)
    observer.start()


def scan_existing_interfaces():
    """
    Scan for existing USB interfaces that match the criteria and add them
    to the `interfaces` list at startup.
    """
    context = pyudev.Context()
    for device in context.list_devices(subsystem='tty'):
        device_node = device.device_node
        if device_node and "ttyACM" in device_node:
            print(f"Found existing interface: {device_node}")
            if device_node not in interfaces:
                interfaces.append(device_node)

            if len(interfaces) == 1:
                selected_interface = interfaces[0]
                print(f"Automatically selected interface: {selected_interface}")

# Initialize STServo SDK
def initialize_sdk(device):
    port_handler = PortHandler(device)
    packet_handler = sts(port_handler)
    if not port_handler.openPort():
        print(f"Failed to open port {device}")
        return None, None
    if not port_handler.setBaudRate(BAUDRATE):
        print(f"Failed to set baudrate for {device}")
        return None, None
    print(f"Initialized device {device}")
    return port_handler, packet_handler

def report_motor_status(packet_handler, motor_id):
    try:
        position, speed, result, _ = packet_handler.ReadPosSpeed(motor_id)

        if result == COMM_SUCCESS:
            voltage, result_voltage, _ = packet_handler.ReadVoltage(motor_id)
            temperature, result_temp, _ = packet_handler.ReadTemperature(motor_id)
            current, result_curr, _ = packet_handler.ReadCurrent(motor_id)
            load, result_load, _ = packet_handler.ReadLoad(motor_id)
            moving_status, result_move, _ = packet_handler.ReadMoving(motor_id)

            motors[motor_id] = {
                "position": position,
                "speed": speed,
                "voltage": (voltage/10) if result_voltage == COMM_SUCCESS else None,
                "temperature": temperature if result_temp == COMM_SUCCESS else None,
                "current": current if result_curr == COMM_SUCCESS else None,
                "load": load if result_load == COMM_SUCCESS else None,
                "moving": moving_status if result_move == COMM_SUCCESS else None
            }

            print(f"{motor_id}: Position: {position}, Speed: {speed} Voltage: {voltage}V, Temperature: {temperature}¬∞C, Current: {current}mA, Load: {load}, Moving: {'Yes' if moving_status else 'No'}")
        
    except Exception as e:
        print(f"Error scanning motor ID {motor_id}: {e}")


def discover_motors(packet_handler):
    """
    Scan for motors connected to the interface and update the `motors` dictionary.
    Retrieves additional status values such as voltage, current, temperature, etc.
    """
    global motors
    motors.clear()
    print("Scanning for motors...")

    for motor_id in range(1, 12): # max motor_id=253.  Reduced during testing for brevity
        position, speed, result, _ = packet_handler.ReadPosSpeed(motor_id)
        if result == COMM_SUCCESS:
            print(f"Found motor ID {motor_id}:")
            report_motor_status(packet_handler, motor_id)

    if not motors:
        print("No motors found.")
    return motors


def tag_motor(packet_handler, current_id, new_id):
    """
    Change a servo's ID. The servo must be the ONLY one connected when changing its ID.
    Unlock EEPROM ‚Üí Write New ID ‚Üí Lock EEPROM again.
    """
    print(f"üîì Unlocking EEPROM for motor ID {current_id}...")
    unlock_result, unlock_error = packet_handler.unLockEprom(current_id)

    if unlock_result != COMM_SUCCESS or unlock_error != 0:
        print(f"‚ùå Failed to unlock EEPROM for motor {current_id}. Error: {unlock_error}")
        return

    print(f"‚öôÔ∏è Changing motor ID {current_id} ‚Üí {new_id}...")
    result, error = packet_handler.WriteID(current_id, new_id)

    if result == COMM_SUCCESS and error == 0:
        print(f"‚úÖ Motor ID successfully updated: {current_id} ‚Üí {new_id}")

        print(f"üîí Locking EEPROM for motor {new_id}...")
        lock_result, lock_error = packet_handler.LockEprom(new_id)

        if lock_result == COMM_SUCCESS and lock_error == 0:
            print(f"üîí EEPROM locked successfully for motor {new_id}.")
        else:
            print(f"‚ö†Ô∏è Warning: Failed to lock EEPROM for motor {new_id}.")
        
        motors[new_id] = motors.pop(current_id)
    else:
        print(f"‚ùå Failed to update ID from {current_id} to {new_id}. Error: {error}")



# Move motor to specific position
def move_motor(packet_handler, motor_id, position):
    result, error = packet_handler.WritePosEx(motor_id, position, 2400, 50)
    if result != COMM_SUCCESS or error != 0:
        print(f"Failed to move motor ID {motor_id} to position {position}")



# Center motor
def center_motor(packet_handler, motor_id):
    if min_position is not None and max_position is not None:
        center = (min_position + max_position) // 2
    else:
        center=2047
    move_motor(packet_handler, motor_id, center)
    print(f"Motor ID {motor_id} moved to center position: {center}")

# Main loop
def main():
    global selected_interface, selected_motor, min_position, max_position

    # Scan for existing interfaces
    scan_existing_interfaces()

    # Monitor USB in a separate thread
    import threading
    usb_thread = threading.Thread(target=monitor_usb, daemon=True)
    usb_thread.start()

    while True:
        print("Options: i - interfaces, m - motors, t - tag motor, <-/-> move, n - set min, x - set max, s - status, c - center, q - quit")
        command = getch()
        
        if command == 'i':
            if interfaces:
                print("Available interfaces:")
                for idx, iface in enumerate(interfaces):
                    print(f"{idx}: {iface}")
                if len(interfaces) == 1:
                    selected_interface = interfaces[0]
                    print(f"Automatically selected interface: {selected_interface}")
                else:
                    selected_interface = interfaces[int(input("Select interface: "))]
            else:
                print("No interfaces found.")
        
        elif command == 'm':
            if not selected_interface:
                print("No interface selected.")
                continue

            port_handler, packet_handler = initialize_sdk(selected_interface)
            if not port_handler or not packet_handler:
                print("Failed to initialize SDK.")
                continue

            motors = discover_motors(packet_handler)
            if not motors:
                print("No motors found. Ensure motors are connected and powered.")
                continue

            print("Available motors:")
            for motor_id in motors.keys():
                print(f"ID: {motor_id}")
            
            try:
                selected_motor = int(input("Select motor ID: "))
                if selected_motor not in motors:
                    print(f"Invalid motor ID: {selected_motor}. Please select a valid ID.")
                    selected_motor = None
            except ValueError:
                print("Invalid input. Please enter a valid motor ID.")
                selected_motor = None

        elif command == 't':
            if selected_motor is None:
                print("No motor selected.")
                continue
            new_id = int(input(f"Enter new ID for motor {selected_motor}: "))
            tag_motor(packet_handler, selected_motor, new_id)
        
        #elif command in ['\x1b[C', '\x1b[D']:  # Right and left arrow keys
        elif command in ['\x1b[C', '\x1b[D', '\033[C', '\033[D']:  
            print("Moving motor")
    
            if selected_motor is None:
                print("‚ùå No motor selected. Cannot move.")
                continue

            # Read the current position
            position, speed, result, _ = packet_handler.ReadPosSpeed(selected_motor)

            if result != COMM_SUCCESS:
                print(f"‚ùå Failed to read position of motor {selected_motor}.")
                continue

            move_increment = 50

            # Default to center if min/max are not set
            if min_position is None or max_position is None:
                min_position, max_position = 0, 4095  # Absolute limits
                center_position = 2047
                print(f"‚ö†Ô∏è Min/max not set. Defaulting to center position: {center_position}")
                new_position = center_position
            else:
                # Determine new position within limits
                if command == "\x1b[C":  # Right Arrow (‚Üí)
                    new_position = min(position + move_increment, max_position)
                else:  # Left Arrow (‚Üê)
                    new_position = max(position - move_increment, min_position)

            # Move to new position
            move_motor(packet_handler, selected_motor, new_position)

            # Wait for the motor to stop moving
            while True:
                position, speed, result, _ = packet_handler.ReadPosSpeed(selected_motor)
                if result != COMM_SUCCESS:
                    print(f"‚ùå Failed to read motor position while waiting for stop.")
                    break
                if speed == 0:
                    break
            time.sleep(0.1)  # Short delay to prevent excessive polling

            report_motor_status(packet_handler, selected_motor)


        elif command == 'n':
            min_position = packet_handler.ReadPosSpeed(selected_motor)[0]
            print(f"Set min position to {min_position}")
        
        elif command == 'x':
            max_position = packet_handler.ReadPosSpeed(selected_motor)[0]
            print(f"Set max position to {max_position}")
        
        elif command == 's':
            for motor_id in motors.keys():
                position, speed, _, _ = packet_handler.ReadPosSpeed(motor_id)
                print(f"ID: {motor_id}, Position: {position}, Speed: {speed}")
        
        elif command == 'c':
            center_motor(packet_handler, selected_motor)
        
        elif command == 'q':
            print("Exiting...")
            break

if __name__ == "__main__":
    main()

